# -*- coding: utf-8 -*-
"""Pythoon_data_pipeline_pdf.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-jjaI1oB_VB_AWEGW86vZZ3_Q74rdeWV

# Blibiotecas
"""

!pip install pandas
!pip install numpy
!pip install sqlalchemy
!pip install openpyxl
!pip install pikepdf
!pip install python-docx
!pip install pdf2docx
!pip install docx2txt
!pip install docx2pdf
!pip install pandasql
!pip install seaborn
!pip install reverse-geocode
!pip install rasterio

"""# Data pipeline"""

import os
from google.colab import drive
drive.mount('/content/drive')

#converte arquivos pdf em docx
import os
# importa o módulo pdf2docx para converter PDF em DOCX
from pdf2docx import Converter

# define o caminho para o diretório onde os arquivos PDF estão localizados
path = '/content/drive/MyDrive/bdproject/pdf'
# conte o número de arquivos PDF no diretório
file_count = len([name for name in os.listdir(path) if os.path.isfile(os.path.join(path, name))])

# loop em cada arquivo PDF e converta-o em DOCX
for i in range(1, file_count+1):
    # defina o nome do arquivo DOCX de saída
    new_doc = f"registro_velocidade_{i:02d}.docx"
    # cria um objeto Converter para o arquivo PDF atual
    obj = Converter(f"/content/drive/MyDrive/bdproject/pdf/registro_velocidade_{i:02d}.pdf")
    # converte o PDF em DOCX e salve-o no arquivo de saída
    obj.convert(new_doc)
    # fecha o objeto Converter
    obj.close()
    # imprima uma mensagem para indicar que a conversão foi concluída
    print(f"registro_velocidade_{i:02d}: Completed!")

print(f"All files completed:{file_count} docxs created")

#converte arquivos docx em xlsx
import docx2txt
from docx import Document
from openpyxl import Workbook
import os
import pandas as pd
import numpy as np
from pandasql import sqldf
from sqlalchemy import create_engine
from sqlalchemy import text

# define o caminho para o diretório onde os arquivos PDF estão localizados
path = '/content/drive/MyDrive/bdproject/docx'
# conte o número de arquivos PDF no diretório
file_count = len([name for name in os.listdir(path) if os.path.isfile(os.path.join(path, name))])

for i in range(1, file_count+1):
    document = Document(f'/content/drive/MyDrive/bdproject/docx/registro_velocidade_{i:02d}.docx')
    tables = []
    for table in document.tables:
            rows = []
            for row in table.rows:
                    cells = []
                    for cell in row.cells:
                        cells.append(cell.text)
                    rows.append(cells) # adicione as células ao final da lista rows
            tables.append(rows) # adicione as linhas ao final da lista tables
    # Create a new xlsx file and add the tables to it
    workbook = Workbook()
    for j, table in enumerate(tables): # use j em vez de i
            worksheet = workbook.create_sheet(title=f"Table {j+1}")
            for row_index, row in enumerate(table):
                for col_index, cell in enumerate(row):
                    worksheet.cell(row=row_index+1, column=col_index+1, value=cell)

    workbook.save(f'/content/drive/MyDrive/bdproject/xlsx/registro_velocidade_{i:02d}.xlsx') # use um nome diferente para cada arquivo xlsx
    print(f'{len(workbook.sheetnames)}')

pd.options.display.float_format="{:.2f}".format

import pandas as pd
import numpy as np

# Import the necessary libraries
import pandas as pd
import os


# Define the path to the directory where the excel files are located
path = '/content/drive/MyDrive/bdproject/xlsx'

# Count the number of excel files in the directory
file_count = len([name for name in os.listdir(path) if os.path.isfile(os.path.join(path, name))])

# Loop through each excel file
for i in range(1, 2):
    df_frames= pd.DataFrame()
    # Read the excel file as a workbook object
    workbook = pd.ExcelFile(f'/content/drive/MyDrive/bdproject/xlsx/registro_velocidade_{i:02d}.xlsx')
    for s in range(1,len(workbook.sheet_names)-1):
        sheet = pd.read_excel(f'/content/drive/MyDrive/bdproject/xlsx/registro_velocidade_{i:02d}.xlsx', sheet_name=f'Table {s}')
        if (sheet.columns[len(sheet.columns)-1])==10:
            sheet = sheet.drop(sheet.columns[len(sheet.columns)-1], axis=1, inplace=True)

        df_frames =df_frames.append(sheet,ignore_index=False)

df_frames= pd.DataFrame()
# Read the excel file as a workbook object
workbook = pd.ExcelFile(f'/content/drive/MyDrive/bdproject/xlsx/registro_velocidade_{i:02d}.xlsx')
for s in range(1,len(workbook.sheet_names)-1):
    sheet = pd.read_excel(f'/content/drive/MyDrive/bdproject/xlsx/registro_velocidade_{i:02d}.xlsx', sheet_name=f'Table {s}')
    if (sheet.columns[len(sheet.columns)-1])==10:
        sheet = sheet.drop(sheet.columns[len(sheet.columns)-1], axis=1, inplace=True)



raw_frame = pd.DataFrame()
    # Loop through each sheet in the workbook
    for j in range(1, sheet_count-1):
        # Read the sheet as a dataframe object
        sheet = pd.read_excel(workbook, sheet_name=f'Table {j}')
        if  j == 1:
            sheet.drop([sheet.columns[3]],axis=1, inplace=True)
        else:
            pass

        if sheet.shape[1] == 10:
                    sheet = sheet.drop([sheet.colmns[9]],axis=1,inplace=True)
        else:
            pass

        if sheet.shape[1]==9:
                    sheet.rename(columns={sheet.columns[0]:'Data e Hora',
                                  sheet.columns[2]:'Latitude',
                                  sheet.columns[3]:'Longitude',
                                  sheet.columns[4]:'Vel. (Km/h)',
                                  sheet.columns[5]:'Km Aprox.',
                                  sheet.columns[6]:'Parado',
                                  sheet.columns[7]:'Tipo Msg.',
                                  sheet.columns[8]:'Log'} )
        else:
            pass

        if sheet.shape[1]==8:
            sheet.rename(columns={sheet.columns[0]:'Data e Hora',
                                  sheet.columns[2]:'Latitude',
                                  sheet.columns[3]:'Longitude',
                                  sheet.columns[4]:'Vel. (Km/h)',
                                  sheet.columns[5]:'Km Aprox.',
                                  sheet.columns[6]:'Parado',
                                  sheet.columns[7]:'Tipo Msg.',
                                  } )
        else:
            pass
        raw_frame = pd.concat([raw_frame,sheet], axis=0)

if sheet.shape[1] == 10:
            sheet.rename(columns={sheet.columns[0]:'Data e Hora',
                                                        sheet.columns[2]:'Latitude',
                                                        sheet.columns[3]:'Longitude',
                                                        sheet.columns[4]:'Vel. (Km/h)',
                                                        sheet.columns[5]:'Km Aprox.',
                                                        sheet.columns[6]:'Parado',
                                                        sheet.columns[7]:'Tipo Msg.',
                                                        sheet.columns[8]:'Log'} )
                        else:
                            continue

                        if sheet.shape[1]==8:
                            sheet= sheet.rename(columns={sheet.columns[0]:'Data e Hora',
                                                    sheet.columns[1]:'Localização',
                                                    sheet.columns[2]:'Latitude',
                                                    sheet.columns[3]:'Longitude',
                                                    sheet.columns[4]:'Vel. (Km/h)',
                                                    sheet.columns[5]:'Km Aprox.',
                                                    sheet.columns[6]:'Parado',
                                                    sheet.columns[7]:'Tipo Msg.'})
                        else:
                            continue

                        raw_frame= pd.concat([raw_frame,sheet])

raw_frame.shape

sheet.head()

sheet.columns = default_columns
        else:
            # Print an error message and skip to the next sheet
            print(f"Error: Table {j} does not have enough columns")
            continue
        # Append the dataframe to the raw_frame
        raw_frame = pd.concat([raw_frame,sheet], axis=0)
    # Save the raw_frame as an excel file
    raw_frame.to_excel(f'/content/drive/MyDrive/bdproject/csv/Frame_{i:02d}.xlsx')
    print(f'Frame_{i:02d} created')

# Try to rename the columns of the dataframe
        try:
            # Rename the columns using a dictionary
            sheet_renamed = sheet.rename(columns={sheet.columns[0]:'Data e Hora',
                                              sheet.columns[1]:'Localização',
                                              sheet.columns[2]:'Latitude',
                                              sheet.columns[3]:'Longitude',
                                              sheet.columns[4]:'Vel. (Km/h)',
                                              sheet.columns[5]:'Km Aprox.',
                                              sheet.columns[6]:'Parado',
                                              sheet.columns[7]:'Tipo Msg.'
                                             })
        except KeyError:
                # Handle the key error if any column does not exist
                print(f"Error: could not rename columns in Table {j}")
                # Exit the program with an error status
                sys.exit(1)
        # Append the dataframe to the raw_frame
        raw_frame = pd.concat([raw_frame,sheet_renamed], axis=0)
    # Rename the columns of the raw_frame using a list of new column names
    raw_frame.columns = ['Data e Hora', 'Localização', 'Latitude', 'Longitude', 'Vel. (Km/h)', 'Km Aprox.', 'Parado', 'Tipo Msg.']
    # Save the raw_frame as an excel file
    raw_frame.to_excel(f'/content/drive/MyDrive/bdproject/csv/Frame_{i:02d}.xlsx')
    print(f'Frame_{i:02d} created')

# Import the pandas library
import pandas as pd
# Import the numpy library
import numpy as np
# Import the geopy library
import geopy
# Import the glob module
import glob

# Define a function that takes latitude and longitude as parameters and returns the region name
def get_region_name(lat, lon):
  # Create a geopy Nominatim object without a timeout parameter
  geolocator = geopy.Nominatim(user_agent="Bing")
  # Use the reverse method to get the location information from the coordinates
  location = geolocator.reverse((lat, lon))
  # Get the region name from the location.raw dictionary
  region_name = location.raw["address"]["region"]
  # Return the region name
  return region_name

# Define a function that takes latitude and longitude as parameters and returns the state name
def get_state_name(lat, lon):
  # Create a geopy Nominatim object without a timeout parameter
  geolocator = geopy.Nominatim(user_agent="Bing")
  # Use the reverse method to get the location information from the coordinates
  location = geolocator.reverse((lat, lon))
  # Get the state name from the location.raw dictionary
  state_name = location.raw["address"]["state"]
  # Return the state name
  return state_name

# Define the path to the directory where the excel files are located
path = '/content/drive/MyDrive/bdproject/csv/'

# Count the number of excel files in the directory
file_count = len([name for name in os.listdir(path) if os.path.isfile(os.path.join(path, name))])

# Loop through each excel file
for i in range(1, file_count+1):
    dataframe = pd.read_excel(f"/content/drive/MyDrive/bdproject/csv/Frame_{i:02d}.xlsx")

    # Add some columns with fixed values
    dataframe['Placa'] = (f"PLACAXYZ-{i:02d}")
    dataframe['Tipo Acidente'] = "Colisão Traseira"

    # Convert the Data e Hora column to datetime format and extract some features

    dataframe = dataframe[dataframe['Data e Hora']!='Data e Hora']
    dataframe["Data e Hora"] = pd.to_datetime(dataframe["Data e Hora"])
    dataframe['Dia da Semana'] = dataframe['Data e Hora'].dt.day_name()
    dataframe["Periodo"] = np.where((dataframe["Data e Hora"].dt.hour<12), "Manhã",np.where((dataframe["Data e Hora"].dt.hour<18),'Tarde','Noite'))

    # Replace the "," values by "." values in Latitude and Longitude columns
    dataframe['Latitude'] = dataframe['Latitude'].str.replace(",", ".")
    dataframe['Longitude'] = dataframe['Longitude'].str.replace(",", ".")

    # Filter out the rows where Vel. (Km/h) is zero or negative
    dataframe = dataframe[((dataframe['Vel. (Km/h)']!='Vel. (Km/h)'))]

    # Apply the functions to get the region name, state name and road type for each row of the dataframe
    dataframe["Região"] = dataframe.apply(lambda row: get_region_name(row["Latitude"], row["Longitude"]), axis=1)
    dataframe["UF"] = dataframe.apply(lambda row: get_state_name(row["Latitude"], row["Longitude"]), axis=1)

    # Drop the Unnamed: 0 column as it is not needed
    dataframe.drop(['Unnamed: 0'], axis = 1, inplace = True)

    # Append the dataframe to the list of dataframes
    dataframe.to_excel(f'/content/drive/MyDrive/bdproject/xlsx_frame/frame_{i:02d}.xlsx')
    print((f'/content/drive/MyDrive/bdproject/xlsx_frame/frame_{i:02d}.xlsx'))

print('ok')

import pandas as pd
path = '/content/drive/MyDrive/bdproject/xlsx_frame'
file_count = len([name for name in os.listdir(path) if os.path.isfile(os.path.join(path, name))])

tabell = pd.DataFrame()

for i in range(1, file_count+1):
    temp_df = pd.read_excel(f'/content/drive/MyDrive/bdproject/xlsx_frame/frame{i:02d}.xlsx')
    temp_df['Log'] = "-"
    temp_df = temp_df[['Unnamed: 0', 'Data e Hora', 'Localização', 'Latitude', 'Longitude', 'Vel. (Km/h)', 'Km Aprox.', 'Parado', 'Tipo Msg.', 'Log', 'Placa', 'Tipo Acidente', 'Dia da Semana', 'Periodo', 'Região', 'UF']]
    tabell = tabell.append(temp_df, ignore_index=True)
    print(temp_df.shape)

tabell.head()

tabell.drop(['Unnamed: 0', 'Km Aprox.', 'Parado', 'Tipo Msg.', 'Log'], axis=1, inplace=True)
tabell[['Placa', 'Data e Hora','Tipo Acidente', 'Dia da Semana', 'Periodo', 'Região', 'UF', 'Vel. (Km/h)']]
tabell.to_excel('/content/drive/MyDrive/bdproject/dataframe_output/dataframe_output.xlsx')
pd.options.display.float_format="{:.2f}".format